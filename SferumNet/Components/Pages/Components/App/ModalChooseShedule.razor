@using ClientSamgk
@using ClientSamgk.Enums
@using ClientSamgkOutputResponse.Interfaces.Cabs
@using ClientSamgkOutputResponse.Interfaces.Groups
@using ClientSamgkOutputResponse.Interfaces.Identity
@using SferumNet.Components.Pages.Components.Job.Common

@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudSelect Label="Тип расписания"
                   @bind-Value="@SheduleType"
                   AnchorOrigin="Origin.BottomCenter">
            @foreach (var item in Enum.GetValues(typeof(ScheduleSearchType)).Cast<ScheduleSearchType>())
            { 
                <MudSelectItem T="ScheduleSearchType" Value="item">@item</MudSelectItem>
            }
        </MudSelect>

        <MudSelect Label="Значение"
                   @bind-Value="@_selectedValue"
                   AnchorOrigin="Origin.BottomCenter">
            @foreach (var item in _values)
            {
                if (item is IResultOutGroup groupUpcasted)
                {
                    <MudSelectItem T="object" Value="groupUpcasted.Id">@groupUpcasted.Name</MudSelectItem>
                }
                else if (item is IResultOutCab cabUpcasted)
                {
                    <MudSelectItem T="object" Value="cabUpcasted.Adress">@cabUpcasted.Adress</MudSelectItem>
                }
                else if (item is IResultOutIdentity teacherUpcasted)
                {
                    <MudSelectItem T="object" Value="teacherUpcasted.Id">@teacherUpcasted.Name</MudSelectItem>
                }
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Закрыть</MudButton>
        <MudButton Color="Color.Primary" OnClick="Select">Выбрать</MudButton>
    </DialogActions>
</MudDialog>

@code {
    
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    
    private readonly ClientSamgkApi _samgk = new ClientSamgkApi();
    
    private ScheduleSearchType _selectedTypeSchedule = ScheduleSearchType.Group;

    public ScheduleSearchType SheduleType
    {
        get => _selectedTypeSchedule;
        set
        {
            _selectedTypeSchedule = value;
            _ = LoadValuesAsync(value);
        }
    }
    
    private List<object> _values = new();
    private object? _selectedValue = new();

    private void Cancel() => MudDialog.Cancel();


    protected override Task OnInitializedAsync()
    {
        //SheduleType = ScheduleSearchType.Group;
        return Task.CompletedTask;
    }

    private async Task LoadValuesAsync(ScheduleSearchType selected)
    {
        if (selected is ScheduleSearchType.Cab)
            _values = new List<object>((_samgk.Cabs.GetCabs()));

        if (selected is ScheduleSearchType.Group)
            _values = new List<object>((_samgk.Groups.GetGroups()));

        if (selected is ScheduleSearchType.Employee)
            _values = new List<object>((_samgk.Accounts.GetTeachers()));

        await InvokeAsync(StateHasChanged);
    }

    private void Select()
    {
        MudDialog.Close(new ScheduleResult { Type = _selectedTypeSchedule, Value = _selectedValue!.ToString()!});
    }
    
}