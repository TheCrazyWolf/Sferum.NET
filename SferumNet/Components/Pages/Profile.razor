@page "/profile"

@using Microsoft.EntityFrameworkCore
@using SferumNet.Components.Pages.Components.App
@using SferumNet.Components.Pages.Components.Job
@using SferumNet.Components.Pages.Components.Vk
@using SferumNet.Configs
@using SferumNet.Database
@using SferumNet.DbModels.Common
@using SferumNet.DbModels.Enum
@using SferumNet.DbModels.Scenarios
@using SferumNet.DbModels.Services
@using SferumNet.DbModels.Vk
@using SferumNet.Services.Common

@inject IDialogService DialogService
@inject SferumNetContext Ef;
@inject NavigationManager Navigation;
@inject IScenarioConfigurator ScenarioConfigurator;

<PageTitle>Сценарии пользователя: @_currentProfile.Name</PageTitle>


<MudAlert Severity="Severity.Normal" Variant="Variant.Outlined" NoIcon="true" Class="my-2">
    <MudAvatar Color="Color.Primary">@_currentProfile.Name.FirstOrDefault()</MudAvatar> Профиль пользователя: @_currentProfile.Name
</MudAlert>

<MudAlert Severity="Severity.Normal" Variant="Variant.Outlined" NoIcon="true" Class="my-2">
    <MudIconButton Size="Size.Small" OnClick="OpenModalCreateJob" Icon="@Icons.Material.Outlined.Add"/>
    <MudIconButton Size="Size.Small" OnClick="() => OpenModalEditProfile()" Icon="@Icons.Material.Outlined.Edit"/>
    <MudIconButton Size="Size.Small" OnClick="() => OpenModalDeleteProfile()" Icon="@Icons.Material.Outlined.RestoreFromTrash" Color="Color.Inherit"/>
</MudAlert>

@if (_scenarios != null)
{
    <MudExpansionPanels Elevation="5" Class="mt-4" MultiExpansion="true">
        @foreach (var scenario in _scenarios)
        {
            <MudAlert Severity="Severity.Normal" Variant="Variant.Outlined" NoIcon="true" Class="my-2">
                <MudText>@scenario.Title</MudText>
                <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                    <MudTabPanel Text="Действия">
                        <MudText>По расписанию с @scenario.TimeStart до @scenario.TimeEnd</MudText>
                        <MudText>Активен: @(scenario.IsActive ? "Да" : "Нет")</MudText>
                        <MudButton OnClick="() => OpenModalEditJob(scenario)" Variant="Variant.Outlined" Color="Color.Primary">Редактировать</MudButton>
                        <MudButton OnClick="() => OpenModalDeleteJob(scenario)" Variant="Variant.Outlined" Color="Color.Error">Удалить</MudButton>
                    </MudTabPanel>
                    <MudTabPanel Text="Статистика">
                        <MudText>Статистика за последние @ChartConst.DefaultDaysByChar дней</MudText>
                        <MudChart ChartType="ChartType.Line" ChartSeries="@GetStatsChartsFromJobLogs(scenario.Id)" XAxisLabels="@GetStatsLabels()" Width="100%" Height="450px"/>
                    </MudTabPanel>
                    <MudTabPanel Text="Логи">
                        <MudText>Показаны последние события</MudText>
                        @foreach (var log in GetLogsAsync(scenario.Id).GetAwaiter().GetResult())
                        {
                            string buildStrLabel = $"{log.DateTime} {log.Type}";
                            <MudTextField T="string" ReadOnly="true" Label="@buildStrLabel" Variant="Variant.Filled" Text="@log.Message" Lines="1" Adornment="Adornment.End"/>
                        }
                    </MudTabPanel>
                </MudTabs>
            </MudAlert>
        }
    </MudExpansionPanels>
}
else
{
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7"/>
}

@code {

    [Parameter] [SupplyParameterFromQuery] public long Id { get; set; }
    private VkProfile _currentProfile = new();
    private ICollection<Job>? _scenarios;

    protected override async Task OnInitializedAsync()
    {
        await LoadDbProfile();
        await LoadJobs();
    }

    private async Task LoadDbProfile()
    {
        _currentProfile = await Ef.VkProfiles.FirstOrDefaultAsync(x => x.Id == Id) ?? new VkProfile();
    }

    private async Task LoadJobs()
    {
        _scenarios = await Ef.Scenarios.Where(x => x.IdProfile == Id).ToListAsync();
    }

    private async void OpenModalEditProfile()
    {
        var parameters = new DialogParameters<ModalAddProfile> { { "Profile", new VkProfile { Id = Id } } };
        var dialog = await DialogService.ShowAsync<ModalAddProfile>("Настройка профиля", parameters);
        await dialog.Result;
        await OpenModalRestartService();
        RefreshPage();
    }

    private async Task OpenModalRestartService()
    {
        var dialog = await DialogService.ShowAsync<ModalServiceRestart>();
        var result = await dialog.Result;

        if (result.Data is null)
            return;

        if ((bool)result.Data)
            await ScenarioConfigurator.RestartAsync();
    }

    private async void OpenModalCreateJob()
    {
        var parameters = new DialogParameters<ModalCreateJob> { { "IdProfile", Id } };
        var dialog = await DialogService.ShowAsync<ModalCreateJob>("Выберите шаблон", parameters);
        await dialog.Result;
        await OpenModalRestartService();
        RefreshPage();
    }


    private async void OpenModalEditJob(Job job)
    {
        if (job is WelcomeJob)
        {
            var parameters = new DialogParameters<ModalWelcomJob> { { "Sc", new WelcomeJob { Id = job.Id } } };
            var dialog = await DialogService.ShowAsync<ModalWelcomJob>("Редактировать", parameters);
            await dialog.Result;
        }
        
        if (job is FactJob)
        {
            var parameters = new DialogParameters<ModalFactsJob> { { "Sc", new FactJob() { Id = job.Id } } };
            var dialog = await DialogService.ShowAsync<ModalFactsJob>("Редактировать", parameters);
            await dialog.Result;
        }
        
        if (job is ScheduleJob)
        {
            var parameters = new DialogParameters<ModalScheduleJob> { { "Sc", new ScheduleJob() { Id = job.Id } } };
            var dialog = await DialogService.ShowAsync<ModalScheduleJob>("Редактировать", parameters);
            await dialog.Result;
        }

        // ETC

        await OpenModalRestartService();
        RefreshPage();
    }

    private void RefreshPage()
    {
        Navigation.NavigateTo($"/profile?id={Id}", true);
    }

    private List<ChartSeries> GetStatsChartsFromJobLogs(long idJob)
    {
        return new List<ChartSeries>
        {
            new()
            {
                Name = "Успешно",
                Data = GetCountLogByTypeFromJob(idJob, EventType.Success)
            },

            new()
            {
                Name = "Ошибки",
                Data = GetCountLogByTypeFromJob(idJob, EventType.Error)
            }
        };
    }

    private double[] GetCountLogByTypeFromJob(long idJob, EventType logType)
    {
        var data = new List<double>();
        for (int i = 0; i < ChartConst.DefaultDaysByChar; i++)
        {
            data.Add(Ef.Logs.Count(x => x.IdScenario == idJob && x.DateTime.Date == DateTime.Now.AddDays(-i).Date && x.Type == logType));
        }

        return data.ToArray();
    }

    private string[] GetStatsLabels()
    {
        var labels = new List<string>();
        for (int i = 0; i < ChartConst.DefaultDaysByChar; i++)
        {
            labels.Add(DateTime.Now.AddDays(-i).ToString("dd.MM"));
        }

        return labels.ToArray();
    }

    private async Task<IReadOnlyList<Log>> GetLogsAsync(long idJob)
    {
        var result = await Ef.Logs.Where(x => x.IdScenario == idJob)
            .OrderByDescending(x => x.DateTime)
            .Take(10)
            .ToListAsync();

        return result;
    }

    private async Task OpenModalDeleteJob(Job job)
    {
        var dialog = await DialogService.ShowAsync<ModalConfirmDialog>();
        var valueResult = await dialog.Result;

        if (valueResult.Data is null)
            return;

        if ((bool)valueResult.Data)
            await ProccessToDeleteJobAsync(job.Id);

        RefreshPage();
    }

    private async Task ProccessToDeleteJobAsync(long idJob)
    {
        var scDb = await Ef.Scenarios
            .FirstOrDefaultAsync(x => x.Id == idJob);

        if (scDb is null)
            return;

        Ef.Remove(scDb);
        await Ef.SaveChangesAsync();
    }

    private async Task OpenModalDeleteProfile()
    {
        var dialog = await DialogService.ShowAsync<ModalConfirmDialog>();
        var valueResult = await dialog.Result;

        if (valueResult.Data is null)
            return;

        if ((bool)valueResult.Data)
            await ProccessToDeleteProfileAsync(Id);

        Navigation.NavigateTo("/", true);
    }

    private async Task ProccessToDeleteProfileAsync(long idProfile)
    {
        var vkProfile = await Ef.VkProfiles
            .FirstOrDefaultAsync(x => x.Id == idProfile);

        if (vkProfile is null)
            return;

        Ef.Remove(vkProfile);
        await Ef.SaveChangesAsync();
    }

}