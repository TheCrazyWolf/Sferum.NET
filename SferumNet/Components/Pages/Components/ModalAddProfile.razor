@using Microsoft.EntityFrameworkCore
@using SferumNet.DbModels.Vk
@using SferumNet.Services
@using SferumNet.Services.Models

@inject SferumNetContext Ef;
@inject IDialogService DialogService
@inject NavigationManager Navigation;

<MudDialog>
    <DialogContent>
        @if (!string.IsNullOrEmpty(_msgError))
        {
            <MudAlert Severity="Severity.Error">@_msgError</MudAlert>
        }
        
        @if (Profile.Id != 0)
        {
            <MudAlert Class="mb-4" Severity="Severity.Warning">В целях безопасности RemixSid скрыт. Если вы хотите изменить Remix удалите текущий профиль и повторите аутентификацию</MudAlert>
        }
        else
        {
            <MudAlert Severity="Severity.Info">Перейдите в веб-версию VK Me, пройдите аутентификацию. Вставьте в поле содержимое из RemixSid</MudAlert>
            <MudTextField @bind-Value="Profile.RemixSid" Label="RemixdSid" Variant="Variant.Outlined"></MudTextField>
        }
        <MudTextField @bind-Value="Profile.Name" Label="Владелец профиля" Variant="Variant.Outlined"></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Закрыть</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Сохранить</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public VkProfile Profile { get; set; } = new();

    private string _msgError = string.Empty;

    void Submit()
    {
        if(Profile.Id == 0)
            Create();
        else
            Save();
    }
    
    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        Profile = await Ef.VkProfiles.FirstOrDefaultAsync(x => x.Id == Profile.Id) ?? new VkProfile();
    }

    private async void Create()
    {
        var factory = new VkRemixFactory();
        var accounts = await factory.GetAccountsAsync(Profile.RemixSid);
        var parameters = new DialogParameters<ModalSelectAccount> { { "Accounts", accounts } };
        var selectAccount = await DialogService.ShowAsync<ModalSelectAccount>("Выберите аккаунт", parameters);
        var resultDialog = await selectAccount.Result;

        if (resultDialog.Data == null)
        {
            _msgError = "Связать аккаунт не удалось";
            return;
        }

        var obj = (ResponceProfileWebToken)resultDialog.Data;
        Profile.AccessToken = obj.AccessToken;
        Profile.UserId = obj.UserId;
        //Profile.AccessTokenExpired = obj.Expires;
        Profile.AccessTokenExpired = DateTime.Now.AddMinutes(10).Ticks;
        await Ef.AddAsync(Profile);
        await Ef.SaveChangesAsync();

        MudDialog.Close();
        Navigation.NavigateTo($"/profile?id={Profile.Id}", true);
    }

    private async void Save()
    {
        Ef.Update(Profile);
        await Ef.SaveChangesAsync();
        MudDialog.Close();
    }
    
}